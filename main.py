import discord
from discord.ext import commands
from discord.ui import View, Select, Modal, TextInput
import json
import os
from dotenv import load_dotenv
from config import ADMINS

load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

DB_FILE = "keys.json"

def load_db():
    with open(DB_FILE, "r") as f:
        return json.load(f)

def save_db(data):
    with open(DB_FILE, "w") as f:
        json.dump(data, f, indent=4)

@bot.event
async def on_ready():
    print(f"‚úÖ Bot {bot.user} ƒë√£ online!")

# ================== MODAL ==================
class RedeemModal(Modal, title="üîë Redeem Key"):
    key = TextInput(label="Nh·∫≠p key c·ªßa b·∫°n", placeholder="V√≠ d·ª•: ABC123XYZ", required=True)

    async def on_submit(self, interaction: discord.Interaction):
        db = load_db()
        keys = db["keys"]
        user_id = str(interaction.user.id)
        key_value = str(self.key.value).strip()

        if key_value not in keys:
            return await interaction.response.send_message("‚ùå Key kh√¥ng t·ªìn t·∫°i!", ephemeral=True)

        if keys[key_value]["uid"] is not None:
            return await interaction.response.send_message("‚ùå Key n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!", ephemeral=True)

        keys[key_value]["uid"] = user_id
        keys[key_value]["hwid"] = "BIND"  # ho·∫∑c None n·∫øu b·∫°n mu·ªën ƒë·ªÉ tr·ªëng
        save_db(db)

        await interaction.response.send_message(f"‚úÖ Redeem th√†nh c√¥ng! Key `{key_value}` ƒë√£ bind v·ªõi UID {user_id}", ephemeral=True)

# ================== MENU ==================
class MenuView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(MenuSelect())

class MenuSelect(Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="Redeem Key", description="Nh·∫≠p key ƒë·ªÉ bind"),
            discord.SelectOption(label="Reset HWID", description="Reset HWID theo UID"),
            discord.SelectOption(label="T·∫°o Key (Admin)", description="Admin t·∫°o key m·ªõi"),
            discord.SelectOption(label="Check Key", description="Ki·ªÉm tra key c·ªßa b·∫°n")
        ]
        super().__init__(placeholder="Ch·ªçn h√†nh ƒë·ªông...", options=options)

    async def callback(self, interaction: discord.Interaction):
        choice = self.values[0]
        user_id = str(interaction.user.id)
        db = load_db()
        keys = db["keys"]

        if choice == "Redeem Key":
            return await interaction.response.send_modal(RedeemModal())

        elif choice == "Reset HWID":
            for k, v in keys.items():
                if v["uid"] == user_id:
                    v["hwid"] = None
                    save_db(db)
                    return await interaction.response.send_message(f"‚úÖ HWID c·ªßa key `{k}` ƒë√£ reset!", ephemeral=True)
            await interaction.response.send_message("‚ùå B·∫°n ch∆∞a c√≥ key!", ephemeral=True)

        elif choice == "T·∫°o Key (Admin)":
            if interaction.user.id not in ADMINS:
                return await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn!", ephemeral=True)
            await interaction.response.send_message("üõ†Ô∏è Nh·∫≠p theo c√∫ ph√°p: `!createkey <key>`", ephemeral=True)

        elif choice == "Check Key":
            for k, v in keys.items():
                if v["uid"] == user_id:
                    return await interaction.response.send_message(
                        f"‚úÖ B·∫°n c√≥ key `{k}` | HWID: `{v['hwid']}`", ephemeral=True
                    )
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ key!", ephemeral=True)

# ================== L·ªÜNH ==================
@bot.command()
async def menu(ctx):
    embed = discord.Embed(title="üîß H·ªá th·ªëng Key", description="Ch·ªçn h√†nh ƒë·ªông trong menu b√™n d∆∞·ªõi:", color=0x00ffcc)
    await ctx.send(embed=embed, view=MenuView())

@bot.command()
async def createkey(ctx, key: str):
    if ctx.author.id not in ADMINS:
        return await ctx.send("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn!")

    db = load_db()
    keys = db["keys"]

    if key in keys:
        return await ctx.send("‚ùå Key ƒë√£ t·ªìn t·∫°i!")

    keys[key] = {"uid": None, "hwid": None}
    save_db(db)
    await ctx.send(f"‚úÖ ƒê√£ t·∫°o key: {key}")

bot.run(TOKEN)
